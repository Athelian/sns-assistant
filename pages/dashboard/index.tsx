import { type NextPage } from 'next'
import Head from 'next/head'

import Footer from '@/components/footer'
import Header from '@/components/header'
import { FacebookPost, FacebookResponse } from '@/types/facebook'
import { api } from '@/utils/api'

const Dashboard: NextPage = () => {
  const handleShare = () => {
    // @see https://developers.facebook.com/docs/sharing/reference/share-dialog/
    FB.ui({
      method: 'share',
      href: 'https://developers.facebook.com/docs/',
    })
  }

  const { mutate } = api.example.writeFacebookMessages.useMutation()

  return (
    <>
      <Head>
        <title>Snai</title>
        <meta content="width=device-width, initial-scale=1" name="viewport" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <main
        className={
          'min-h-screen min-w-[800px] text-[x-large] flex flex-col justify-between'
        }
      >
        <Header />
        <button
          onClick={() => {
            FB.login(function (response) {
              if (response.authResponse) {
                console.log('Welcome!  Fetching your information.... ')
                FB.api('/me', function (response) {
                  console.log(
                    'Good to see you, ' +
                      (response as { name: string }).name +
                      '.'
                  )
                  console.log(response)
                })
              } else {
                console.log('User cancelled login or did not fully authorize.')
              }
            })
          }}
        >
          fb login
        </button>
        <button
          onClick={() => {
            console.log(FB.getAuthResponse())
          }}
        >
          get auth res
        </button>
        <button
          onClick={async () => {
            let allPosts: Parameters<typeof mutate>[0] = []

            const fields = ['message', 'created_time'] as const
            type Post = FacebookPost<(typeof fields)[number]>
            type Response = FacebookResponse<Post>

            const fbAuthResponse = FB.getAuthResponse()
            if (!fbAuthResponse) {
              console.error('User is not authenticated with Facebook')
              return
            }
            const { userID } = fbAuthResponse

            let next: string | null | void = userID + '/posts'

            while (typeof next === 'string') {
              next = await new Promise<string | null>((resolve, reject) => {
                if (typeof next !== 'string') return
                FB.api<{ fields: typeof fields }, Response>(
                  next,
                  { fields },
                  (res) => {
                    if (!res?.data) {
                      return reject(res)
                    }
                    allPosts = allPosts.concat(
                      res.data
                        .filter(
                          (post): post is Required<Post> => !!post.message
                        )
                        .map(({ created_time, ...rest }) => ({
                          ...rest,
                          postedAt: created_time,
                        }))
                    )
                    resolve(res.paging?.next ?? null)
                  }
                )
              }).catch((error) => {
                console.error(error)
              })
            }
            mutate(allPosts)
          }}
        >
          get user data
        </button>
        <button onClick={handleShare}>Share</button>
        <Footer />
      </main>
    </>
  )
}

export default Dashboard
